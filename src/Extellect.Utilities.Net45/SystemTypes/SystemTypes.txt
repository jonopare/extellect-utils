//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.IO;

namespace Extellect.Utilities.SystemTypes
{
	public interface IFileInfo
	{
		#region Properties
		String Name { get; }
		Int64 Length { get; }
		String DirectoryName { get; }
		DirectoryInfo Directory { get; }
		Boolean IsReadOnly { get; set; }
		Boolean Exists { get; }
		#endregion

		#region Methods
		FileSecurity GetAccessControl();
		FileSecurity GetAccessControl(AccessControlSections includeSections);
		Void SetAccessControl(FileSecurity fileSecurity);
		StreamReader OpenText();
		StreamWriter CreateText();
		StreamWriter AppendText();
		FileInfo CopyTo(String destFileName);
		FileInfo CopyTo(String destFileName, Boolean overwrite);
		FileStream Create();
		Void Delete();
		Void Decrypt();
		Void Encrypt();
		FileStream Open(FileMode mode);
		FileStream Open(FileMode mode, FileAccess access);
		FileStream Open(FileMode mode, FileAccess access, FileShare share);
		FileStream OpenRead();
		FileStream OpenWrite();
		Void MoveTo(String destFileName);
		FileInfo Replace(String destinationFileName, String destinationBackupFileName);
		FileInfo Replace(String destinationFileName, String destinationBackupFileName, Boolean ignoreMetadataErrors);
		String ToString();
		#endregion
	}
}
using System;
using System.IO;

namespace Extellect.Utilities.SystemTypes
{
	public interface IDirectoryInfo
	{
		#region Properties
		String Name { get; }
		DirectoryInfo Parent { get; }
		Boolean Exists { get; }
		DirectoryInfo Root { get; }
		#endregion

		#region Methods
		DirectoryInfo CreateSubdirectory(String path);
		DirectoryInfo CreateSubdirectory(String path, DirectorySecurity directorySecurity);
		Void Create();
		Void Create(DirectorySecurity directorySecurity);
		DirectorySecurity GetAccessControl();
		DirectorySecurity GetAccessControl(AccessControlSections includeSections);
		Void SetAccessControl(DirectorySecurity directorySecurity);
		FileInfo[] GetFiles(String searchPattern);
		FileInfo[] GetFiles(String searchPattern, SearchOption searchOption);
		FileInfo[] GetFiles();
		DirectoryInfo[] GetDirectories();
		FileSystemInfo[] GetFileSystemInfos(String searchPattern);
		FileSystemInfo[] GetFileSystemInfos(String searchPattern, SearchOption searchOption);
		FileSystemInfo[] GetFileSystemInfos();
		DirectoryInfo[] GetDirectories(String searchPattern);
		DirectoryInfo[] GetDirectories(String searchPattern, SearchOption searchOption);
		IEnumerable<DirectoryInfo> EnumerateDirectories();
		IEnumerable<DirectoryInfo> EnumerateDirectories(String searchPattern);
		IEnumerable<DirectoryInfo> EnumerateDirectories(String searchPattern, SearchOption searchOption);
		IEnumerable<FileInfo> EnumerateFiles();
		IEnumerable<FileInfo> EnumerateFiles(String searchPattern);
		IEnumerable<FileInfo> EnumerateFiles(String searchPattern, SearchOption searchOption);
		IEnumerable<FileSystemInfo> EnumerateFileSystemInfos();
		IEnumerable<FileSystemInfo> EnumerateFileSystemInfos(String searchPattern);
		IEnumerable<FileSystemInfo> EnumerateFileSystemInfos(String searchPattern, SearchOption searchOption);
		Void MoveTo(String destDirName);
		Void Delete();
		Void Delete(Boolean recursive);
		String ToString();
		#endregion
	}
}
using System;
using System.IO;

namespace Extellect.Utilities.SystemTypes
{
	public interface IDriveInfo
	{
		#region Properties
		String Name { get; }
		DriveType DriveType { get; }
		String DriveFormat { get; }
		Boolean IsReady { get; }
		Int64 AvailableFreeSpace { get; }
		Int64 TotalFreeSpace { get; }
		Int64 TotalSize { get; }
		DirectoryInfo RootDirectory { get; }
		String VolumeLabel { get; set; }
		#endregion

		#region Methods
		String ToString();
		#endregion
	}
}


